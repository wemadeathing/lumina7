---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import CTA from '../../components/CTA.astro';

export async function getStaticPaths() {
  const projects = await getCollection('portfolio');
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<'portfolio'>;

const project = Astro.props;
const { Content } = await project.render();

// Get related projects (same category, excluding current)
const allProjects = await getCollection('portfolio');
const relatedProjects = allProjects
  .filter(p => p.slug !== project.slug && p.data.category === project.data.category)
  .slice(0, 3);
---

<Layout title={`${project.data.title} | Lumina7`} description={project.data.description}>
  <!-- BreadcrumbList Structured Data -->
  <script type="application/ld+json" slot="head">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Home",
          "item": "https://lumina7.co.za"
        },
        {
          "@type": "ListItem",
          "position": 2,
          "name": "Work",
          "item": "https://lumina7.co.za/work"
        },
        {
          "@type": "ListItem",
          "position": 3,
          "name": project.data.company,
          "item": `https://lumina7.co.za/work/${project.slug}`
        }
      ]
    })}
  </script>
  
  <!-- CreativeWork Structured Data -->
  <script type="application/ld+json" slot="head">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "CreativeWork",
      "name": project.data.title,
      "description": project.data.description,
      "image": project.data.heroImage,
      "creator": {
        "@type": "Organization",
        "name": "Lumina7"
      },
      "datePublished": project.data.year,
      "keywords": project.data.services.join(", "),
      "genre": project.data.category,
      "url": `https://lumina7.co.za/work/${project.slug}`
    })}
  </script>
  <Header />
  
  <!-- Hero Section -->
  <section class="pt-24 pb-0 px-6 lg:px-8 bg-white">
    <div class="max-w-7xl mx-auto">
      <!-- Breadcrumb -->
      <nav class="mb-12">
        <div class="flex items-center space-x-2 text-sm text-gray-500">
          <a href="/" class="hover:text-gray-900 transition-colors">Home</a>
          <span>/</span>
          <a href="/work" class="hover:text-gray-900 transition-colors">Work</a>
          <span>/</span>
          <span class="text-gray-900">{project.data.company}</span>
        </div>
      </nav>

      <!-- Hero Content -->
      <div class="mb-16">
        <div class="max-w-5xl">
          <span class="text-xs uppercase tracking-[0.5em] text-gray-500 block mb-8">
            {project.data.category}
          </span>
          <h1 class="text-[3.5rem] md:text-[4.5rem] font-medium text-gray-900 leading-[1.05] mb-6">
            {project.data.company}
          </h1>
          <p class="text-2xl md:text-[2rem] text-gray-600 leading-tight max-w-3xl">
            {project.data.title}
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Hero Image -->
  <section class="px-6 lg:px-8 bg-white mb-20">
    <div class="max-w-7xl mx-auto">
      <div class="relative overflow-hidden bg-gray-100">
        <img 
          src={project.data.heroImage} 
          alt={project.data.title}
          class="w-full h-[400px] md:h-[600px] lg:h-[700px] object-cover"
        />
      </div>
    </div>
  </section>

  <!-- Project Overview -->
  <section class="py-24 px-6 lg:px-8 bg-white border-t border-gray-200">
    <div class="max-w-7xl mx-auto grid md:grid-cols-[minmax(0,1fr)_minmax(0,2fr)] gap-16">
      <aside class="space-y-10 md:sticky md:top-32 self-start">
        <div>
          <h3 class="text-sm font-semibold text-gray-900 uppercase tracking-[0.35em] mb-6">Scope</h3>
          <ul class="space-y-3">
            {project.data.services.map(service => (
              <li class="text-gray-700 text-sm tracking-wide">{service}</li>
            ))}
          </ul>
        </div>
        {project.data.client && (
          <div>
            <h4 class="text-sm font-semibold text-gray-900 uppercase tracking-[0.35em] mb-3">Client</h4>
            <p class="text-gray-700 text-sm tracking-wide">{project.data.client}</p>
          </div>
        )}
      </aside>
      <div class="space-y-16">
        <div class="leading-relaxed text-lg text-gray-700 space-y-8">
          <Content />
        </div>
      </div>
    </div>
  </section>

  <!-- Project Content -->
  <section class="py-24 px-6 lg:px-8 bg-white border-t border-gray-200">
    <div class="max-w-7xl mx-auto">
      {project.data.images && project.data.images.length > 0 && (
        <div class="grid gap-10 md:grid-cols-2">
          {project.data.images.slice(0, 6).map((image, index) => (
            <figure class="bg-gray-100 overflow-hidden group cursor-pointer" data-modal-image={image}>
              <img 
                src={image} 
                alt={`${project.data.company} project image ${index + 1}`}
                class="w-full aspect-[4/3] object-cover group-hover:scale-105 transition-transform duration-500"
              />
            </figure>
          ))}
        </div>
      )}
    </div>
  </section>

  <!-- Image Modal -->
  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden items-center justify-center p-4">
    <button 
      id="closeModal" 
      class="absolute top-6 right-6 text-white hover:text-gray-300 transition-colors z-10"
      aria-label="Close modal"
    >
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    <div class="max-w-7xl max-h-[90vh] w-full h-full flex items-center justify-center">
      <img 
        id="modalImage" 
        src="" 
        alt="Full size image"
        class="max-w-full max-h-full object-contain"
      />
    </div>
  </div>

  <!-- Related Projects -->
  {relatedProjects.length > 0 && (
    <section class="py-24 px-6 lg:px-8 bg-gray-50">
      <div class="max-w-7xl mx-auto">
        <div class="text-center mb-16">
          <h2 class="text-3xl md:text-4xl font-medium mb-4 text-gray-900">More {project.data.category} Work</h2>
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">Explore other projects in this category</p>
        </div>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
          {relatedProjects.map(relatedProject => (
            <article class="group cursor-pointer">
              <a href={`/work/${relatedProject.slug}`} class="block">
                <div class="relative overflow-hidden bg-gray-100 mb-6">
                  <img 
                    src={relatedProject.data.heroImage} 
                    alt={relatedProject.data.title}
                    class="w-full h-64 object-cover"
                  />
                </div>
                <div>
                  <span class="text-xs uppercase tracking-[0.3em] text-gray-500 mb-2 block">
                    {relatedProject.data.category}
                  </span>
                  <h3 class="text-xl font-medium text-gray-900 mb-3 group-hover:text-gray-600 transition-colors">
                    {relatedProject.data.company}
                  </h3>
                  <p class="text-gray-600 mb-4 leading-relaxed">
                    {relatedProject.data.title}
                  </p>
                  <div class="flex flex-wrap gap-4">
                    {relatedProject.data.services.slice(0, 2).map(service => (
                      <span class="text-xs uppercase tracking-[0.2em] text-gray-500">
                        {service}
                      </span>
                    ))}
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <CTA />

  <Footer />
</Layout>

<script>
  // Image Modal functionality
  const modal = document.getElementById('imageModal') as HTMLElement;
  const modalImage = document.getElementById('modalImage') as HTMLImageElement;
  const closeModalBtn = document.getElementById('closeModal') as HTMLButtonElement;
  const imageElements = document.querySelectorAll('[data-modal-image]');

  // Open modal when clicking on an image
  imageElements.forEach((element) => {
    element.addEventListener('click', () => {
      const imageSrc = element.getAttribute('data-modal-image');
      if (imageSrc && modal && modalImage) {
        modalImage.src = imageSrc;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      }
    });
  });

  // Close modal when clicking the close button
  if (closeModalBtn && modal) {
    closeModalBtn.addEventListener('click', () => {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = ''; // Restore scrolling
    });
  }

  // Close modal when clicking outside the image
  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      }
    });
  }

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = ''; // Restore scrolling
    }
  });
</script>

<style>
  .prose {
    color: #374151;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #111827;
    font-weight: 600;
  }
  
  .prose h1 {
    font-size: 2.25rem;
    line-height: 2.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .prose h2 {
    font-size: 1.875rem;
    line-height: 2.25rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .prose h3 {
    font-size: 1.5rem;
    line-height: 2rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  .prose p {
    margin-bottom: 1.25rem;
    line-height: 1.75;
  }
  
  .prose ul, .prose ol {
    margin-bottom: 1.25rem;
    padding-left: 1.5rem;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
  }
  
  .prose a {
    color: #2563eb;
    text-decoration: underline;
  }
  
  .prose a:hover {
    color: #1d4ed8;
  }
  
  .prose strong {
    font-weight: 600;
    color: #111827;
  }
  
  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: #6b7280;
  }
</style>
